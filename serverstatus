#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#################################################
# Skript zum Auslesen des                       #
# Status verschiedener Serverdienste            #
# --------------------------------------------- #
# Erstellt von Johannes Paul, 09.04.2014        #
# Bearbeitet am 17.11.2018                      #
# --------------------------------------------- #
# Syntax: serverstatus [vpn] [tel]              #
# Parameter (VPN-Server):                       #
#    vpn - Detailausgabe VPN-Server             #
#    tel - Telnet statt Logdatei                #
#################################################

# Import
import curses
import logging
import re
import subprocess
import sys
import time
import vpnstatus_parser
from collections import OrderedDict
from curseslib import initialize_colors


class Service:
    def __init__(self, name, description):
        self.name = name
        self.description = description
        self.statusline = ''
        self.status = None
        self.since = None

    def set_statusline(self, line):
        self.statusline = line

    def set_status(self, status):
        self.status = status

    def set_since(self, since):
        self.since = since


def define_services():
    services = OrderedDict()
    services['sys'] = [
        'Systemfunktionen',
        Service(name='rsyslog',                 description='System Logging (rsyslog)'),
        Service(name='cron',                    description='Cron Service'),
        Service(name='dhcpcd',                  description='DHCP Client Service'),
        Service(name='ntp',                     description='Internetzeit Service (ntp)'),
        #Service(name='saslauthd',               description='SASL-Auth'),
    ]
    services['remote'] = [
        'Fernwartung',
        Service(name='ssh',                     description='SSH-Server (openssh)'),
        Service(name='vncserver@:1',            description='VNC-Server (tigervnc)'),
    ]
    services['network'] = [
        'Netzwerk-Infrastruktur, Routing',
        Service(name='openvpn@server',          description='VPN-Server (openvpn)'),
        Service(name='tor@default',                     description='Tor'),
        Service(name='polipo',                  description='Proxyserver (polipo)'),
    ]
    services['com'] = [
        'Kommunikation',
        #Service(name='murmur',                  description='VOIP-Server (murmur)'),
        Service(name='mumble-server',           description='VOIP-Server (mumble)'),
        Service(name='prosody',                 description='Jabber/XMPP-Server (prosody)'),
        #Service(name='quasselcore',             description='Quassel-Core'),
        Service(name='inspircd',                description='IRC-Server (inspircd)'),
        Service(name='etherpad-lite',           description='Etherpad-Lite'),
    ]
    services['web'] = [
        'Web, Datenbank, Dateien',
        #Service(name='httpd',                   description='Webserver (apache)'),
        Service(name='apache2',                 description='Webserver (apache)'),
        Service(name='mariadb',                 description='MySQL-Server (mariadb)'),
        #Service(name='mysql',                   description='MySQL-Server (mariadb)'),
        Service(name='postgresql@9.6-main',     description='PostgreSQL-Server (postgresql)'),
        Service(name='vsftpd',                  description='FTP-Server (vsftpd)'),
        Service(name='smbd',                    description='Dateiserver (samba, smbd)'),
        Service(name='icecast2',                description='Streaming Server (icecast2)'),
        #Service(name='mpd',                     description='Musik Player Daemon'),
        Service(name='logitechmediaserver',     description='Squeezebox-Server'),
    ]
    services['mail'] = [
        'Email',
        Service(name='postfix@-',                 description='Postfix-Mail-Server (postfix)'),
        #Service(name='exim4',                   description='Exim-Mail-Server (exim4)'),
        Service(name='fetchmail',               description='Fetchmail (fetchmail)'),
        Service(name='dovecot',                 description='Imap-Server (dovecot)'),
    ]
    services['monit'] = [
        'Monitoring',
        Service(name='icinga2',                 description='Icinga2-Monitoring'),
    ]

    return services


def initialize_logger():
    logger = logging.getLogger(__file__)
    hdlr = logging.FileHandler(__file__ + ".log")
    formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
    hdlr.setFormatter(formatter)
    logger.addHandler(hdlr)
    logger.setLevel(logging.DEBUG)
    return logger

def curses_output(screen, services):
    # Define headers
    headers = {
        'sd': 'Serverdienst',
        'stat': 'Status',
        'since': 'Aktiv seit',
    }

    if 'short' in sys.argv:
        short = True
    else:
        short = False

    screen.clear()
    screen.move(0, 0)
    screen.addstr("Zum Beenden <q> drücken!\n", curses.color_pair(1) | curses.A_BOLD)

    ### ---- Statusübersicht ---- ####
    # Insgesamt 106 Bindestriche => 53 + Zeichen/2 (aufgerundet)
    screen.addstr(
        "\n----------------------------------------------------------------------------------------------------------\n")

    fmt = "%(sd)-30s %(stat)-15s %(since)-15s"
    screen.addstr(fmt % headers + '\n')
    screen.addstr(
        "----------------------------------------------------------------------------------------------------------\n")
    for stype in services:
        if short:
            if stype == 'sys':
                continue
        else:
            screen.addstr("\n  --- {} ---".format(services[stype][0]), curses.color_pair(5) | curses.A_BOLD)
        for s in services[stype][1:]:
            if s.status == 'aktiv':
                screen.addstr("\n%-30s " % s.description)
                screen.addstr("%-15s " % s.status, curses.color_pair(3) | curses.A_BOLD)
            elif s.status == 'inaktiv':
                screen.addstr("\n%-30s " % s.description)
                screen.addstr("%-15s " % s.status, curses.color_pair(4) | curses.A_BOLD)
            elif s.status == 'nicht installiert':
                screen.addstr("\n%-30s " % s.description)
                screen.addstr("%-15s " % s.status, curses.color_pair(1))
            else:
                screen.addstr("\n%-30s " % s.description)
                screen.addstr("%-15s " % s.status, curses.color_pair(2) | curses.A_BOLD)
            screen.addstr("%-15s" % s.since)
        screen.addstr("\n")


def main(screen):
    LOG = initialize_logger()

    initialize_colors()
    screen.nodelay(1)

    if 'vpn' in sys.argv:
        vpn = True
        vpnstatusline = 'Fehler in der Statusüberprüfung!!!'
    else:
        vpn = False

    if 'tel' in sys.argv:
        tel = True
    else:
        tel = False

    services = define_services()

    commandstr = 'systemctl status '
    servicedict = {}
    for servicesbytype in services:
        for service in services[servicesbytype][1:]:
            servicedict[service.name] = service
            commandstr += service.name + '.service '
            if service.name == 'openvpn@server':
                vpnservice = service

    # Dauerschleife zur Ueberprüfung und Ausgabe
    while True:
        # Exit with <q>
        c = screen.getch()
        if c == ord('q'): break

        process = subprocess.Popen(commandstr, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
        status_out, status_err = process.communicate()
        servicestatuses = status_out.split(bytes.decode(b'\xe2\x97\x8f '))
        statuserrors = status_err.split('\n')

        for statuserror in statuserrors:
            if statuserror:
                servicename = re.search(r"(\S+)\.service", statuserror).group(1)
                service = servicedict[servicename]
                if ('could not be found' in statuserror):
                    service.set_status('nicht installiert')
                    service.set_since('--')
                    service.set_statusline(statuserror)

        for servicestatus in servicestatuses[1:]:
            if servicestatus:
                statuslines = servicestatus.split('\n')
                servicename = re.search(r"(\S+)\.service", statuslines[0]).group(1)
                service = servicedict[servicename]
                service.set_status('Fehler !!!')
                service.set_since('--')

                for line in statuslines:
                    if ('Loaded' in line):
                        service.set_statusline(line)
                        if ('not-found' in line):
                            service.set_status('nicht installiert')
                            break
                    if ('Active' in line):
                        service.set_statusline(line)
                        if ('inactive' in line):
                            service.set_status('inaktiv')
                        elif ('active (running)' in line):
                            service.set_status('aktiv')
                            service.set_since(line[line.find('since') + 6:])
                        elif ('failed' in line):
                            service.set_status('fehlgeschlagen')
                            service.set_since(line[line.find('since') + 6:])
                        break

        curses_output(screen, services)

        ### ---- VPN-Server ---- ####

        if vpn:
            vpnstatus_parser.curses_header(screen, tel)
            if vpnservice.status == 'aktiv':
                clients = vpnstatus_parser.get_status_info(tel)
                vpnstatus_parser.curses_clients(screen, clients)
            else:
                vpnstatus_parser.curses_status(screen, vpnservice.status, vpnservice.statusline)


        screen.refresh()
        # Wait a moment
        time.sleep(1)
    curses.endwin()


curses.wrapper(main)
